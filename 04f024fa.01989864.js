(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{64:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return i})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return p}));var a=n(3),r=n(7),b=(n(0),n(93)),l={title:"Tools API \u2699\ufe0f"},i={unversionedId:"tools",id:"tools",isDocsHomePage:!1,title:"Tools API \u2699\ufe0f",description:"A custom component to enable reparenting.",source:"@site/docs\\tools.mdx",slug:"/tools",permalink:"/react-reparenting/docs/tools",editUrl:"https://github.com/paol-imi/react-reparenting/edit/master/website/docs/tools.mdx",version:"current",sidebar:"docs",previous:{title:"Custom Renderer \ud83d\udd0c",permalink:"/react-reparenting/docs/renderer"}},c=[{value:"&lt;Reparentable /&gt;",id:"reparentable-",children:[]},{value:"SendReparentableChild( fromParentId, toParentId, child, position, skipUpdate ): index",id:"sendreparentablechild-fromparentid-toparentid-child-position-skipupdate--index",children:[]},{value:"ParentFiber",id:"parentfiber",children:[{value:"parent.sendChild( toParent, child, position, skipUpdate ): index",id:"parentsendchild-toparent-child-position-skipupdate--index",children:[]}]},{value:"&lt;Parent /&gt;",id:"parent-",children:[]},{value:"createParent( instance, findFiber ): parent",id:"createparent-instance-findfiber--parent",children:[]},{value:"useParent( ref, findFiber ): parent",id:"useparent-ref-findfiber--parent",children:[]}],d={toc:c};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(b.b)("wrapper",Object(a.a)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(b.b)("h2",{id:"reparentable-"},"<Reparentable /",">"),Object(b.b)("p",null,"A custom component to enable reparenting."),Object(b.b)("h4",{id:"props"},"props"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",{parentName:"tr",align:null},"Name"),Object(b.b)("th",{parentName:"tr",align:null},"Type"),Object(b.b)("th",{parentName:"tr",align:null},"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"id"),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("em",{parentName:"td"},"string")),Object(b.b)("td",{parentName:"tr",align:null},"The id of the component it must be unique must be unique among all Reparentables. ",Object(b.b)("br",null),Object(b.b)("br",null)," ",Object(b.b)("strong",{parentName:"td"},"Required"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"children"),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("em",{parentName:"td"},"ReactNode")),Object(b.b)("td",{parentName:"tr",align:null},"The children that can be transferred.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"findFiber"),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("em",{parentName:"td"},"func")),Object(b.b)("td",{parentName:"tr",align:null},"A function to change the parent fiber. ",Object(b.b)("br",null),Object(b.b)("br",null)," ",Object(b.b)("strong",{parentName:"td"},"Signature")," ",Object(b.b)("inlineCode",{parentName:"td"},"(parent: fiber) => fiber"))))),Object(b.b)("h2",{id:"sendreparentablechild-fromparentid-toparentid-child-position-skipupdate--index"},"SendReparentableChild( fromParentId, toParentId, child, position, ","[skipUpdate]"," ): index"),Object(b.b)("p",null,"Remove a child from a Reparentable component and add it to a new Reparentable component. DOM nodes will also be sent (optional)."),Object(b.b)("h4",{id:"arguments"},"arguments"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",{parentName:"tr",align:null},"Name"),Object(b.b)("th",{parentName:"tr",align:null},"Type"),Object(b.b)("th",{parentName:"tr",align:null},"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"fromParentId"),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("em",{parentName:"td"},"string")),Object(b.b)("td",{parentName:"tr",align:null},"The id of the current Reparentable parent. ",Object(b.b)("br",null),Object(b.b)("br",null)," ",Object(b.b)("strong",{parentName:"td"},"Required"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"toParentId"),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("em",{parentName:"td"},"string")),Object(b.b)("td",{parentName:"tr",align:null},"The id of the new Reparentable parent. ",Object(b.b)("br",null),Object(b.b)("br",null)," ",Object(b.b)("strong",{parentName:"td"},"Required"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"child"),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("em",{parentName:"td"},"string / number")),Object(b.b)("td",{parentName:"tr",align:null},"The key or the index of the child to be transferred. ",Object(b.b)("br",null),Object(b.b)("br",null)," ",Object(b.b)("strong",{parentName:"td"},"Required"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"position"),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("em",{parentName:"td"},"string / number")),Object(b.b)("td",{parentName:"tr",align:null},"The index or the key of the child whose position will be used as an index ",Object(b.b)("em",{parentName:"td"},"(insert before)"),". The child is added at the bottom if -1 is provided or the index is greater than the number of children. The child is added at the bottom if none of the children have that key ",Object(b.b)("br",null),Object(b.b)("br",null)," ",Object(b.b)("strong",{parentName:"td"},"Required")," .")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"skipUpdate"),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("em",{parentName:"td"},"boolean")),Object(b.b)("td",{parentName:"tr",align:null},"If true, the send method will not transfer the DOM nodes. ",Object(b.b)("br",null),Object(b.b)("br",null)," Default ",Object(b.b)("strong",{parentName:"td"},"false")," .")))),Object(b.b)("h4",{id:"returns"},"returns"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",{parentName:"tr",align:null},"Type"),Object(b.b)("th",{parentName:"tr",align:null},"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("em",{parentName:"td"},"number")),Object(b.b)("td",{parentName:"tr",align:null},"The index in which the child is added. If the child to remove is not found (invalid key), or one of the parents is not found returns -1.")))),Object(b.b)("h2",{id:"parentfiber"},"ParentFiber"),Object(b.b)("h3",{id:"parentsendchild-toparent-child-position-skipupdate--index"},"parent.sendChild( toParent, child, position, ","[skipUpdate]"," ): index"),Object(b.b)("p",null,"Remove a child from this instance and add it to the provided ParentFiber instance."),Object(b.b)("h4",{id:"arguments-1"},"arguments"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",{parentName:"tr",align:null},"Name"),Object(b.b)("th",{parentName:"tr",align:null},"Type"),Object(b.b)("th",{parentName:"tr",align:null},"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"toParent"),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("em",{parentName:"td"},"ParentFiber")),Object(b.b)("td",{parentName:"tr",align:null},"The ParentFiber linked with the new parent component. ",Object(b.b)("br",null),Object(b.b)("br",null)," ",Object(b.b)("strong",{parentName:"td"},"Required"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"child"),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("em",{parentName:"td"},"string / number")),Object(b.b)("td",{parentName:"tr",align:null},"The key or the index of the child to be transferred. ",Object(b.b)("br",null),Object(b.b)("br",null)," ",Object(b.b)("strong",{parentName:"td"},"Required"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"position"),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("em",{parentName:"td"},"string / number")),Object(b.b)("td",{parentName:"tr",align:null},"The index or the key of the child whose position will be used as an index ",Object(b.b)("em",{parentName:"td"},"(insert before)"),". The child is added at the bottom if -1 is provided or the index is greater than the number of children. The child is added at the bottom if none of the children have that key ",Object(b.b)("br",null),Object(b.b)("br",null)," ",Object(b.b)("strong",{parentName:"td"},"Required")," .")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"skipUpdate"),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("em",{parentName:"td"},"boolean")),Object(b.b)("td",{parentName:"tr",align:null},"If true, the send method will not transfer the DOM nodes. ",Object(b.b)("br",null),Object(b.b)("br",null)," Default ",Object(b.b)("strong",{parentName:"td"},"false")," .")))),Object(b.b)("h4",{id:"returns-1"},"returns"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",{parentName:"tr",align:null},"Type"),Object(b.b)("th",{parentName:"tr",align:null},"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("em",{parentName:"td"},"number")),Object(b.b)("td",{parentName:"tr",align:null},"The index in which the child is added, if the child to remove is not found (invalid key) returns -1.")))),Object(b.b)("h2",{id:"parent-"},"<Parent /",">"),Object(b.b)("p",null,"A component that generate a ParentFiber instance."),Object(b.b)("h4",{id:"props-1"},"Props"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",{parentName:"tr",align:null},"Name"),Object(b.b)("th",{parentName:"tr",align:null},"Type"),Object(b.b)("th",{parentName:"tr",align:null},"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"children"),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("em",{parentName:"td"},"ReactNode")),Object(b.b)("td",{parentName:"tr",align:null},"The children that can be transferred.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"parentRef"),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("em",{parentName:"td"},"React.Ref<ParentFiber",">")),Object(b.b)("td",{parentName:"tr",align:null},"The ref of the ParentFiber instance. ",Object(b.b)("br",null),Object(b.b)("br",null)," ",Object(b.b)("strong",{parentName:"td"},"Required"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"findFiber"),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("em",{parentName:"td"},"func")),Object(b.b)("td",{parentName:"tr",align:null},"A function to change the parent fiber. ",Object(b.b)("br",null),Object(b.b)("br",null)," ",Object(b.b)("strong",{parentName:"td"},"Signature")," ",Object(b.b)("inlineCode",{parentName:"td"},"(parent: fiber) => fiber"))))),Object(b.b)("h2",{id:"createparent-instance-findfiber--parent"},"createParent( instance, ","[findFiber]"," ): parent"),Object(b.b)("p",null,"A method to generate a ParentFiber instance."),Object(b.b)("h4",{id:"arguments-2"},"arguments"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",{parentName:"tr",align:null},"Name"),Object(b.b)("th",{parentName:"tr",align:null},"Type"),Object(b.b)("th",{parentName:"tr",align:null},"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"instance"),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("em",{parentName:"td"},"React.Component")),Object(b.b)("td",{parentName:"tr",align:null},"A class component instance, must be called before the component is mounted. ",Object(b.b)("br",null),Object(b.b)("br",null)," ",Object(b.b)("strong",{parentName:"td"},"Required"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"findFiber"),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("em",{parentName:"td"},"func")),Object(b.b)("td",{parentName:"tr",align:null},"A function to change the parent fiber. ",Object(b.b)("br",null),Object(b.b)("br",null)," ",Object(b.b)("strong",{parentName:"td"},"Signature")," ",Object(b.b)("inlineCode",{parentName:"td"},"(parent: fiber) => fiber"))))),Object(b.b)("h4",{id:"returns-2"},"returns"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",{parentName:"tr",align:null},"Type"),Object(b.b)("th",{parentName:"tr",align:null},"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("em",{parentName:"td"},"ParentFiber")),Object(b.b)("td",{parentName:"tr",align:null},"The parentFiber instance.")))),Object(b.b)("h2",{id:"useparent-ref-findfiber--parent"},"useParent( ref, ","[findFiber]"," ): parent"),Object(b.b)("p",null,"An hook to generate a ParentFiber instance."),Object(b.b)("h4",{id:"arguments-3"},"arguments"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",{parentName:"tr",align:null},"Name"),Object(b.b)("th",{parentName:"tr",align:null},"Type"),Object(b.b)("th",{parentName:"tr",align:null},"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"ref"),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("em",{parentName:"td"},"React.RefObject")),Object(b.b)("td",{parentName:"tr",align:null},"The ref of the parent element. ",Object(b.b)("br",null),Object(b.b)("br",null)," ",Object(b.b)("strong",{parentName:"td"},"Required"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"findFiber"),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("em",{parentName:"td"},"func")),Object(b.b)("td",{parentName:"tr",align:null},"A function to change the parent fiber. ",Object(b.b)("br",null),Object(b.b)("br",null)," ",Object(b.b)("strong",{parentName:"td"},"Signature")," ",Object(b.b)("inlineCode",{parentName:"td"},"(parent: fiber) => fiber"))))),Object(b.b)("h4",{id:"returns-3"},"returns"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",{parentName:"tr",align:null},"Type"),Object(b.b)("th",{parentName:"tr",align:null},"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("em",{parentName:"td"},"ParentFiber")),Object(b.b)("td",{parentName:"tr",align:null},"The ParentFiber instance.")))))}p.isMDXComponent=!0},93:function(e,t,n){"use strict";n.d(t,"a",(function(){return o})),n.d(t,"b",(function(){return O}));var a=n(0),r=n.n(a);function b(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){b(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},b=Object.keys(e);for(a=0;a<b.length;a++)n=b[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var b=Object.getOwnPropertySymbols(e);for(a=0;a<b.length;a++)n=b[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=r.a.createContext({}),p=function(e){var t=r.a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},o=function(e){var t=p(e.components);return r.a.createElement(d.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,b=e.originalType,l=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),o=p(n),u=a,O=o["".concat(l,".").concat(u)]||o[u]||m[u]||b;return n?r.a.createElement(O,i(i({ref:t},d),{},{components:n})):r.a.createElement(O,i({ref:t},d))}));function O(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var b=n.length,l=new Array(b);l[0]=u;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var d=2;d<b;d++)l[d]=n[d];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);