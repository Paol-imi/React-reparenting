(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{149:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return p})),t.d(n,"metadata",(function(){return s})),t.d(n,"rightToc",(function(){return o})),t.d(n,"default",(function(){return l}));var a=t(1),r=t(9),c=(t(0),t(162)),p={title:"useParent"},s={id:"useparent",title:"useParent",description:"Get the [useParent](./tools#useparent--parent) hook from the package.",source:"@site/docs\\useparent.mdx",permalink:"/react-reparenting/docs/useparent",editUrl:"https://github.com/paol-imi/react-reparenting/edit/master/website/docs/useparent.mdx",sidebar:"docs",previous:{title:"Reparentable",permalink:"/react-reparenting/docs/reparentable"},next:{title:"Custom Renderer \ud83d\udd0c",permalink:"/react-reparenting/docs/renderer"}},o=[{value:"Setup \u2699\ufe0f",id:"setup-\ufe0f",children:[]},{value:"Usage \ud83d\udcd6",id:"usage-",children:[]},{value:"Example \ud83d\udca1",id:"example-",children:[]}],i={rightToc:o};function l(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(a.a)({},i,t,{components:n,mdxType:"MDXLayout"}),Object(c.b)("p",null,"Get the ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"./tools#useparent--parent"}),"useParent")," hook from the package."),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"import {useParent} from 'react-reparenting';\n")),Object(c.b)("h2",{id:"setup-\ufe0f"},"Setup \u2699\ufe0f"),Object(c.b)("p",null,"You can generate a parent instance to use the ",Object(c.b)("inlineCode",{parentName:"p"},"send")," method."),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"const Parent = ({children}) => {\n  const parent = useParent();\n  // Move the parent instance to a centralized store...\n  return children;\n};\n")),Object(c.b)("h2",{id:"usage-"},"Usage \ud83d\udcd6"),Object(c.b)("p",null,"Let's define a very simple child component for the example."),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"const Child = () => <div />;\n")),Object(c.b)("p",null,"We use two ",Object(c.b)("inlineCode",{parentName:"p"},"<Parent>")," components in the app as defined above."),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"const App = () => {\n  // The Parents.\n  const [parents, setParents] = useState({\n    A: ['c1', 'c2'],\n    B: ['c3'],\n  });\n\n  // The Child components.\n  const children = {\n    parentA: parents.A.map((key) => <Child key={key} />),\n    parentB: parents.B.map((key) => <Child key={key} />),\n  };\n\n  return (\n    <>\n      {/* Parent A */}\n      <Parent>{children.parentA}</Parent>\n      {/* Parent B */}\n      <Parent>{children.parentB}</Parent>\n    </>\n  );\n};\n")),Object(c.b)("p",null,"Now we can reparent anywhere in our app using the send method ",Object(c.b)("em",{parentName:"p"},"(The instances are the ones returned by the hook)"),"."),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"// Send the first Child ('c3') of 'parentB'\n// before the Child ('c2') of 'parentA'.\nparentB.sendChild(parentA, 0, 'c2');\n// Send the Child ('c1') of 'parentA'\n// in the first position of 'parentB'.\nparentA.sendChild(parentB, 'c1', 0);\n\n// Re-render the components with the changes.\n// The transferred children won't be re-mounted.\nsetParents({\n  A: ['c3', 'c2'],\n  B: ['c1'],\n});\n")),Object(c.b)("h2",{id:"example-"},"Example \ud83d\udca1"),Object(c.b)("p",null,"Coming soon."))}l.isMDXComponent=!0}}]);