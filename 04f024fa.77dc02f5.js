(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{137:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return l})),a.d(t,"metadata",(function(){return c})),a.d(t,"rightToc",(function(){return i})),a.d(t,"default",(function(){return p}));var n=a(1),b=a(9),r=(a(0),a(162)),l={title:"Tools API \u2699\ufe0f"},c={id:"tools",title:"Tools API \u2699\ufe0f",description:"## <Reparentable /\\>",source:"@site/docs\\tools.mdx",permalink:"/react-reparenting/docs/tools",editUrl:"https://github.com/paol-imi/react-reparenting/edit/master/website/docs/tools.mdx",sidebar:"docs",previous:{title:"Custom Renderer \ud83d\udd0c",permalink:"/react-reparenting/docs/renderer"}},i=[{value:"&lt;Reparentable /&gt;",id:"reparentable-",children:[{value:"\u2022 props",id:"-props",children:[]}]},{value:"SendReparentableChild( fromParentId, toParentId, child, position, skipUpdate ): index",id:"sendreparentablechild-fromparentid-toparentid-child-position-skipupdate--index",children:[]},{value:"ParentFiber",id:"parentfiber",children:[{value:"\u2022 parent.sendChild( toParent, child, position, skipUpdate ): index",id:"-parentsendchild-toparent-child-position-skipupdate--index",children:[]}]},{value:"useParent( ): parent",id:"useparent--parent",children:[]}],d={rightToc:i};function p(e){var t=e.components,a=Object(b.a)(e,["components"]);return Object(r.b)("wrapper",Object(n.a)({},d,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"reparentable-"},"<Reparentable /",">"),Object(r.b)("p",null,"A custom component to enable reparenting."),Object(r.b)("h3",{id:"-props"},"\u2022 props"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"id"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("em",{parentName:"td"},"string")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The id of the component it must be unique must be unique among all Reparentables. ",Object(r.b)("br",null),Object(r.b)("br",null)," ",Object(r.b)("strong",{parentName:"td"},"Required"))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"children"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("em",{parentName:"td"},"ReactNode")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The children that can be transferred.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"findFiber"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("em",{parentName:"td"},"func")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"A function to change the parent fiber. ",Object(r.b)("br",null),Object(r.b)("br",null)," ",Object(r.b)("strong",{parentName:"td"},"Signature")," ",Object(r.b)("inlineCode",{parentName:"td"},"(parent: fiber) => fiber"))))),Object(r.b)("h2",{id:"sendreparentablechild-fromparentid-toparentid-child-position-skipupdate--index"},"SendReparentableChild( fromParentId, toParentId, child, position, ","[skipUpdate]"," ): index"),Object(r.b)("p",null,"Remove a child from a Reparentable component and add it to a new Reparentable component. DOM nodes will also be sent (optional)."),Object(r.b)("h4",{id:"arguments"},"arguments"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"fromParentId"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("em",{parentName:"td"},"string")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The id of the current Reparentable parent. ",Object(r.b)("br",null),Object(r.b)("br",null)," ",Object(r.b)("strong",{parentName:"td"},"Required"))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"toParentId"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("em",{parentName:"td"},"string")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The id of the new Reparentable parent. ",Object(r.b)("br",null),Object(r.b)("br",null)," ",Object(r.b)("strong",{parentName:"td"},"Required"))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"child"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("em",{parentName:"td"},"string / number")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The key or the index of the child to be transferred. ",Object(r.b)("br",null),Object(r.b)("br",null)," ",Object(r.b)("strong",{parentName:"td"},"Required"))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"position"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("em",{parentName:"td"},"string / number")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The index or the key of the child whose position will be used as an index ",Object(r.b)("em",{parentName:"td"},"(insert before)"),". The child is added at the bottom if -1 is provided or the index is greater than the number of children. The child is added at the bottom if none of the children have that key ",Object(r.b)("br",null),Object(r.b)("br",null)," ",Object(r.b)("strong",{parentName:"td"},"Required")," .")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"skipUpdate"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("em",{parentName:"td"},"boolean")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"If true, the send method will not transfer the DOM nodes. ",Object(r.b)("br",null),Object(r.b)("br",null)," Default ",Object(r.b)("strong",{parentName:"td"},"false")," .")))),Object(r.b)("h4",{id:"returns"},"returns"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("em",{parentName:"td"},"number")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The index in which the child is added. If the child to remove is not found (invalid key), or one of the parents is not found returns -1.")))),Object(r.b)("h2",{id:"parentfiber"},"ParentFiber"),Object(r.b)("h3",{id:"-parentsendchild-toparent-child-position-skipupdate--index"},"\u2022 parent.sendChild( toParent, child, position, ","[skipUpdate]"," ): index"),Object(r.b)("p",null,"Remove a child from this instance and add it to the provided ParentFiber instance."),Object(r.b)("h4",{id:"arguments-1"},"arguments"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"toParent"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("em",{parentName:"td"},"ParentFiber")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The ParentFiber linked with the new parent component. ",Object(r.b)("br",null),Object(r.b)("br",null)," ",Object(r.b)("strong",{parentName:"td"},"Required"))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"child"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("em",{parentName:"td"},"string / number")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The key or the index of the child to be transferred. ",Object(r.b)("br",null),Object(r.b)("br",null)," ",Object(r.b)("strong",{parentName:"td"},"Required"))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"position"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("em",{parentName:"td"},"string / number")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The index or the key of the child whose position will be used as an index ",Object(r.b)("em",{parentName:"td"},"(insert before)"),". The child is added at the bottom if -1 is provided or the index is greater than the number of children. The child is added at the bottom if none of the children have that key ",Object(r.b)("br",null),Object(r.b)("br",null)," ",Object(r.b)("strong",{parentName:"td"},"Required")," .")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"skipUpdate"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("em",{parentName:"td"},"boolean")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"If true, the send method will not transfer the DOM nodes. ",Object(r.b)("br",null),Object(r.b)("br",null)," Default ",Object(r.b)("strong",{parentName:"td"},"false")," .")))),Object(r.b)("h4",{id:"returns-1"},"returns"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("em",{parentName:"td"},"number")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The index in which the child is added, if the child to remove is not found (invalid key) returns -1.")))),Object(r.b)("h2",{id:"useparent--parent"},"useParent( ): parent"),Object(r.b)("p",null,"An hook to generate a ParentFiber instance."),Object(r.b)("h4",{id:"returns-2"},"returns"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(r.b)("em",{parentName:"td"},"ParentFiber")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The ParentFiber instance.")))))}p.isMDXComponent=!0}}]);